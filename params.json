{
  "name": "generator-api",
  "tagline": "ðŸš€ Yeoman generator for creating RESTful NodeJS APIs, using ES6, Mongoose and Express",
  "body": "# generator-api\r\n\r\n[![CircleCI](https://circleci.com/gh/ndelvalle/generator-api.svg?style=svg)](https://circleci.com/gh/ndelvalle/generator-api)\r\n[![bitHound Overall Score](https://www.bithound.io/github/ndelvalle/generator-api/badges/score.svg)](https://www.bithound.io/github/ndelvalle/generator-api)\r\n[![bitHound Dependencies](https://www.bithound.io/github/ndelvalle/generator-api/badges/dependencies.svg)](https://www.bithound.io/github/ndelvalle/generator-api/master/dependencies/npm)\r\n[![bitHound Dev Dependencies](https://www.bithound.io/github/ndelvalle/generator-api/badges/devDependencies.svg)](https://www.bithound.io/github/ndelvalle/generator-api/master/dependencies/npm)\r\n[![bitHound Code](https://www.bithound.io/github/ndelvalle/generator-api/badges/code.svg)](https://www.bithound.io/github/ndelvalle/generator-api)\r\n[![npm](https://img.shields.io/npm/v/generator-api.svg?maxAge=2592000?style=flat-square)](https://www.npmjs.com/package/generator-api)\r\n\r\n[![NPM](https://nodei.co/npm/generator-api.png?downloads=true)](https://nodei.co/npm/generator-api/)\r\n\r\nYeoman generator for creating RESTful NodeJS APIs, using ES6, Mongoose and Express. The fastest way to get your project up and running using an awesome stack.\r\n\r\n![generator](http://yeoman.io/static/illustration-home-inverted.91b07808be.png)\r\n\r\n\r\n## Getting started\r\n\r\n- Make sure you have [yeoman](https://github.com/yeoman/yo) installed on your machine:\r\n    `npm install -g yo`\r\n- Install the generator **globally**: `npm install -g generator-api`\r\n- Run: `yo api`, or `yo` and choose `Api` option\r\n\r\n## Running the generated project\r\n\r\nMake sure you have node version `>= 6` because this project uses native supported ES6 features.\r\n\r\n### Development\r\n\r\n- Run: `mongod` to start the local mongodb in a separated terminal instance (If you don't have mongodb installed locally, visit It's [webpage](https://docs.mongodb.com/manual/installation/) to learn how to install it).\r\n- Run: `npm run dev` to run the app (By default the app will run at `localhost:8080`, you can change this in the config file).\r\n\r\n**Did you choose Docker support?** :whale:\r\n\r\nYou only need [Docker](https://docs.docker.com/engine/installation/) and [docker-compose](https://docs.docker.com/compose/install/) installed, no mongodb, no node, no npm. :sunglasses:\r\n\r\n- Run: `docker-compose up` to run the app. _You might need `sudo` for this one_.\r\n\r\n### Production\r\n\r\nYou'll likely be consuming mongodb as a service, so make sure to set the env var pointing at it.\r\n\r\nJust run `npm start`.\r\n\r\n**Wait, you choose Docker right?** :whale:\r\n\r\nBuild the Docker container and run it:\r\n\r\n```bash\r\nsudo docker build -t <image-name> .\r\nsudo docker run \\\r\n  -p <host-port>:8080 \\\r\n  -d <image-name> \\\r\n  -e MONGO_DB_URI=mongodb://<username>:<password>@<host>:<port> \\\r\n  npm run start\r\n```\r\n\r\n## Architecture\r\nThe idea is to be able to scale having a simple architecture. Assuming we use `user` and `pet` as models the generated project would look like this:\r\n\r\n```\r\nâ”œâ”€â”€â”€index.js\r\nâ”œâ”€â”€â”€routes.js\r\nâ”œâ”€â”€â”€package.json\r\nâ”œâ”€â”€â”€config.js\r\nâ””â”€â”€â”€lib/\r\n|   â”œâ”€â”€â”€controller.js\r\n|   â”œâ”€â”€â”€facade.js\r\nâ””â”€â”€â”€model/\r\n    â”œâ”€â”€â”€user/\r\n    â”‚   â””â”€â”€â”€user-controller.js\r\n    |   â””â”€â”€â”€user-facade.js\r\n    |   â””â”€â”€â”€user-router.js\r\n    |   â””â”€â”€â”€user-schema.js\r\n    â””â”€â”€â”€pet/\r\n        â””â”€â”€â”€pet-controller.js\r\n        â””â”€â”€â”€pet-facade.js\r\n        â””â”€â”€â”€pet-router.js\r\n        â””â”€â”€â”€pet-schema.js\r\n```\r\n\r\n#### Controller:\r\nHTTP layer, in this instance you can manage express request, response and next. In `lib/controller` are the basic RESTful methods `find`, `findOne`, `findById`, `create`, `update` and `remove`. Because this class is extending from there, you got that solved. You can overwrite extended methods or create custom ones here.\r\n\r\n#### Facade:\r\nThis layer works as a simplified interface of mongoose and as Business Model layer, in this instance you can manage your business logic. For example, if you want to create a pet before creating a user, because you'll end up adding that pet to the person, this is the place.\r\n\r\nIn `lib/facade` you have the basic support for RESTful methods. Because this class is extending from there, you got that solved. You can overwrite extended methods or create custom ones here. Also you can support more mongoose functionality like `skip`, `sort` etc.\r\n\r\n\r\n## To do\r\n* Create more generator templates to add new models once the project was initialized\r\n* Implement testing in the generated project\r\n\r\n## Contributing\r\nContributors are welcome, please fork and send pull requests! If you have any ideas on how to improve this project please submit an issue.\r\n\r\n\r\n## License\r\n[MIT License](https://github.com/ndelvalle/generator-api/blob/master/LICENSE)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}